/*
 * This file is generated by jOOQ.
 */
package com.perfscope.model.tables;


import com.perfscope.model.DefaultSchema;
import com.perfscope.model.tables.records.ContextSwitchesViewRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ContextSwitchesView extends TableImpl<ContextSwitchesViewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>context_switches_view</code>
     */
    public static final ContextSwitchesView CONTEXT_SWITCHES_VIEW = new ContextSwitchesView();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ContextSwitchesViewRecord> getRecordType() {
        return ContextSwitchesViewRecord.class;
    }

    /**
     * The column <code>context_switches_view.id</code>.
     */
    public final TableField<ContextSwitchesViewRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>context_switches_view.machine_id</code>.
     */
    public final TableField<ContextSwitchesViewRecord, Long> MACHINE_ID = createField(DSL.name("machine_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>context_switches_view.time</code>.
     */
    public final TableField<ContextSwitchesViewRecord, Long> TIME = createField(DSL.name("time"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>context_switches_view.cpu</code>.
     */
    public final TableField<ContextSwitchesViewRecord, Integer> CPU = createField(DSL.name("cpu"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>context_switches_view.pid_out</code>.
     */
    public final TableField<ContextSwitchesViewRecord, Integer> PID_OUT = createField(DSL.name("pid_out"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>context_switches_view.tid_out</code>.
     */
    public final TableField<ContextSwitchesViewRecord, Integer> TID_OUT = createField(DSL.name("tid_out"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>context_switches_view.comm_out</code>.
     */
    public final TableField<ContextSwitchesViewRecord, String> COMM_OUT = createField(DSL.name("comm_out"), SQLDataType.VARCHAR(16), this, "");

    /**
     * The column <code>context_switches_view.pid_in</code>.
     */
    public final TableField<ContextSwitchesViewRecord, Integer> PID_IN = createField(DSL.name("pid_in"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>context_switches_view.tid_in</code>.
     */
    public final TableField<ContextSwitchesViewRecord, Integer> TID_IN = createField(DSL.name("tid_in"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>context_switches_view.comm_in</code>.
     */
    public final TableField<ContextSwitchesViewRecord, String> COMM_IN = createField(DSL.name("comm_in"), SQLDataType.VARCHAR(16), this, "");

    /**
     * The column <code>context_switches_view.flags</code>.
     */
    public final TableField<ContextSwitchesViewRecord, String> FLAGS = createField(DSL.name("flags"), SQLDataType.VARCHAR, this, "");

    private ContextSwitchesView(Name alias, Table<ContextSwitchesViewRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ContextSwitchesView(Name alias, Table<ContextSwitchesViewRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("CREATE VIEW context_switches_view AS SELECT context_switches.id,context_switches.machine_id,context_switches.time,context_switches.cpu,th_out.pid AS pid_out,th_out.tid AS tid_out,comm_out.comm AS comm_out,th_in.pid AS pid_in,th_in.tid AS tid_in,comm_in.comm AS comm_in,CASE	  WHEN context_switches.flags = 0 THEN 'in' WHEN context_switches.flags = 1 THEN 'out' WHEN context_switches.flags = 3 THEN 'out preempt' ELSE context_switches.flags END AS flags FROM context_switches INNER JOIN threads AS th_out ON th_out.id   = context_switches.thread_out_id INNER JOIN threads AS th_in  ON th_in.id    = context_switches.thread_in_id INNER JOIN comms AS comm_out ON comm_out.id = context_switches.comm_out_id INNER JOIN comms AS comm_in  ON comm_in.id  = context_switches.comm_in_id"), where);
    }

    /**
     * Create an aliased <code>context_switches_view</code> table reference
     */
    public ContextSwitchesView(String alias) {
        this(DSL.name(alias), CONTEXT_SWITCHES_VIEW);
    }

    /**
     * Create an aliased <code>context_switches_view</code> table reference
     */
    public ContextSwitchesView(Name alias) {
        this(alias, CONTEXT_SWITCHES_VIEW);
    }

    /**
     * Create a <code>context_switches_view</code> table reference
     */
    public ContextSwitchesView() {
        this(DSL.name("context_switches_view"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public ContextSwitchesView as(String alias) {
        return new ContextSwitchesView(DSL.name(alias), this);
    }

    @Override
    public ContextSwitchesView as(Name alias) {
        return new ContextSwitchesView(alias, this);
    }

    @Override
    public ContextSwitchesView as(Table<?> alias) {
        return new ContextSwitchesView(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ContextSwitchesView rename(String name) {
        return new ContextSwitchesView(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ContextSwitchesView rename(Name name) {
        return new ContextSwitchesView(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ContextSwitchesView rename(Table<?> name) {
        return new ContextSwitchesView(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ContextSwitchesView where(Condition condition) {
        return new ContextSwitchesView(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ContextSwitchesView where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ContextSwitchesView where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ContextSwitchesView where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ContextSwitchesView where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ContextSwitchesView where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ContextSwitchesView where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ContextSwitchesView where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ContextSwitchesView whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ContextSwitchesView whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
