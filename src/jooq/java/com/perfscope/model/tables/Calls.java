/*
 * This file is generated by jOOQ.
 */
package com.perfscope.model.tables;


import com.perfscope.model.DefaultSchema;
import com.perfscope.model.Indexes;
import com.perfscope.model.Keys;
import com.perfscope.model.tables.records.CallsRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Calls extends TableImpl<CallsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>calls</code>
     */
    public static final Calls CALLS = new Calls();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CallsRecord> getRecordType() {
        return CallsRecord.class;
    }

    /**
     * The column <code>calls.id</code>.
     */
    public final TableField<CallsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>calls.thread_id</code>.
     */
    public final TableField<CallsRecord, Long> THREAD_ID = createField(DSL.name("thread_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>calls.comm_id</code>.
     */
    public final TableField<CallsRecord, Long> COMM_ID = createField(DSL.name("comm_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>calls.call_path_id</code>.
     */
    public final TableField<CallsRecord, Long> CALL_PATH_ID = createField(DSL.name("call_path_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>calls.call_time</code>.
     */
    public final TableField<CallsRecord, Long> CALL_TIME = createField(DSL.name("call_time"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>calls.return_time</code>.
     */
    public final TableField<CallsRecord, Long> RETURN_TIME = createField(DSL.name("return_time"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>calls.branch_count</code>.
     */
    public final TableField<CallsRecord, Long> BRANCH_COUNT = createField(DSL.name("branch_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>calls.call_id</code>.
     */
    public final TableField<CallsRecord, Long> CALL_ID = createField(DSL.name("call_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>calls.return_id</code>.
     */
    public final TableField<CallsRecord, Long> RETURN_ID = createField(DSL.name("return_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>calls.parent_call_path_id</code>.
     */
    public final TableField<CallsRecord, Long> PARENT_CALL_PATH_ID = createField(DSL.name("parent_call_path_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>calls.flags</code>.
     */
    public final TableField<CallsRecord, Integer> FLAGS = createField(DSL.name("flags"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>calls.parent_id</code>.
     */
    public final TableField<CallsRecord, Long> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>calls.insn_count</code>.
     */
    public final TableField<CallsRecord, Long> INSN_COUNT = createField(DSL.name("insn_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>calls.cyc_count</code>.
     */
    public final TableField<CallsRecord, Long> CYC_COUNT = createField(DSL.name("cyc_count"), SQLDataType.BIGINT, this, "");

    private Calls(Name alias, Table<CallsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Calls(Name alias, Table<CallsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>calls</code> table reference
     */
    public Calls(String alias) {
        this(DSL.name(alias), CALLS);
    }

    /**
     * Create an aliased <code>calls</code> table reference
     */
    public Calls(Name alias) {
        this(alias, CALLS);
    }

    /**
     * Create a <code>calls</code> table reference
     */
    public Calls() {
        this(DSL.name("calls"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PCPID_IDX, Indexes.PID_IDX);
    }

    @Override
    public UniqueKey<CallsRecord> getPrimaryKey() {
        return Keys.CALLS__PK_CALLS;
    }

    @Override
    public Calls as(String alias) {
        return new Calls(DSL.name(alias), this);
    }

    @Override
    public Calls as(Name alias) {
        return new Calls(alias, this);
    }

    @Override
    public Calls as(Table<?> alias) {
        return new Calls(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Calls rename(String name) {
        return new Calls(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Calls rename(Name name) {
        return new Calls(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Calls rename(Table<?> name) {
        return new Calls(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Calls where(Condition condition) {
        return new Calls(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Calls where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Calls where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Calls where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Calls where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Calls where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Calls where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Calls where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Calls whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Calls whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
