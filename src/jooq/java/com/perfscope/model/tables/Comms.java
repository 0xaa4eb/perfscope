/*
 * This file is generated by jOOQ.
 */
package com.perfscope.model.tables;


import com.perfscope.model.DefaultSchema;
import com.perfscope.model.Keys;
import com.perfscope.model.tables.records.CommsRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Comms extends TableImpl<CommsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>comms</code>
     */
    public static final Comms COMMS = new Comms();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CommsRecord> getRecordType() {
        return CommsRecord.class;
    }

    /**
     * The column <code>comms.id</code>.
     */
    public final TableField<CommsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>comms.comm</code>.
     */
    public final TableField<CommsRecord, String> COMM = createField(DSL.name("comm"), SQLDataType.VARCHAR(16), this, "");

    /**
     * The column <code>comms.c_thread_id</code>.
     */
    public final TableField<CommsRecord, Long> C_THREAD_ID = createField(DSL.name("c_thread_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>comms.c_time</code>.
     */
    public final TableField<CommsRecord, Long> C_TIME = createField(DSL.name("c_time"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>comms.exec_flag</code>.
     */
    public final TableField<CommsRecord, Boolean> EXEC_FLAG = createField(DSL.name("exec_flag"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>comms.has_calls</code>.
     */
    public final TableField<CommsRecord, Boolean> HAS_CALLS = createField(DSL.name("has_calls"), SQLDataType.BOOLEAN, this, "");

    private Comms(Name alias, Table<CommsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Comms(Name alias, Table<CommsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>comms</code> table reference
     */
    public Comms(String alias) {
        this(DSL.name(alias), COMMS);
    }

    /**
     * Create an aliased <code>comms</code> table reference
     */
    public Comms(Name alias) {
        this(alias, COMMS);
    }

    /**
     * Create a <code>comms</code> table reference
     */
    public Comms() {
        this(DSL.name("comms"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<CommsRecord> getPrimaryKey() {
        return Keys.COMMS__PK_COMMS;
    }

    @Override
    public Comms as(String alias) {
        return new Comms(DSL.name(alias), this);
    }

    @Override
    public Comms as(Name alias) {
        return new Comms(alias, this);
    }

    @Override
    public Comms as(Table<?> alias) {
        return new Comms(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Comms rename(String name) {
        return new Comms(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Comms rename(Name name) {
        return new Comms(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Comms rename(Table<?> name) {
        return new Comms(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Comms where(Condition condition) {
        return new Comms(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Comms where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Comms where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Comms where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Comms where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Comms where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Comms where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Comms where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Comms whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Comms whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
