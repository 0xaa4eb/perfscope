/*
 * This file is generated by jOOQ.
 */
package com.perfscope.model.tables;


import com.perfscope.model.DefaultSchema;
import com.perfscope.model.Keys;
import com.perfscope.model.tables.records.SamplesRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Samples extends TableImpl<SamplesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>samples</code>
     */
    public static final Samples SAMPLES = new Samples();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SamplesRecord> getRecordType() {
        return SamplesRecord.class;
    }

    /**
     * The column <code>samples.id</code>.
     */
    public final TableField<SamplesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>samples.evsel_id</code>.
     */
    public final TableField<SamplesRecord, Long> EVSEL_ID = createField(DSL.name("evsel_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>samples.machine_id</code>.
     */
    public final TableField<SamplesRecord, Long> MACHINE_ID = createField(DSL.name("machine_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>samples.thread_id</code>.
     */
    public final TableField<SamplesRecord, Long> THREAD_ID = createField(DSL.name("thread_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>samples.comm_id</code>.
     */
    public final TableField<SamplesRecord, Long> COMM_ID = createField(DSL.name("comm_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>samples.dso_id</code>.
     */
    public final TableField<SamplesRecord, Long> DSO_ID = createField(DSL.name("dso_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>samples.symbol_id</code>.
     */
    public final TableField<SamplesRecord, Long> SYMBOL_ID = createField(DSL.name("symbol_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>samples.sym_offset</code>.
     */
    public final TableField<SamplesRecord, Long> SYM_OFFSET = createField(DSL.name("sym_offset"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>samples.ip</code>.
     */
    public final TableField<SamplesRecord, Long> IP = createField(DSL.name("ip"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>samples.time</code>.
     */
    public final TableField<SamplesRecord, Long> TIME = createField(DSL.name("time"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>samples.cpu</code>.
     */
    public final TableField<SamplesRecord, Integer> CPU = createField(DSL.name("cpu"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>samples.to_dso_id</code>.
     */
    public final TableField<SamplesRecord, Long> TO_DSO_ID = createField(DSL.name("to_dso_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>samples.to_symbol_id</code>.
     */
    public final TableField<SamplesRecord, Long> TO_SYMBOL_ID = createField(DSL.name("to_symbol_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>samples.to_sym_offset</code>.
     */
    public final TableField<SamplesRecord, Long> TO_SYM_OFFSET = createField(DSL.name("to_sym_offset"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>samples.to_ip</code>.
     */
    public final TableField<SamplesRecord, Long> TO_IP = createField(DSL.name("to_ip"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>samples.branch_type</code>.
     */
    public final TableField<SamplesRecord, Integer> BRANCH_TYPE = createField(DSL.name("branch_type"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>samples.in_tx</code>.
     */
    public final TableField<SamplesRecord, Boolean> IN_TX = createField(DSL.name("in_tx"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>samples.call_path_id</code>.
     */
    public final TableField<SamplesRecord, Long> CALL_PATH_ID = createField(DSL.name("call_path_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>samples.insn_count</code>.
     */
    public final TableField<SamplesRecord, Long> INSN_COUNT = createField(DSL.name("insn_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>samples.cyc_count</code>.
     */
    public final TableField<SamplesRecord, Long> CYC_COUNT = createField(DSL.name("cyc_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>samples.flags</code>.
     */
    public final TableField<SamplesRecord, Integer> FLAGS = createField(DSL.name("flags"), SQLDataType.INTEGER, this, "");

    private Samples(Name alias, Table<SamplesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Samples(Name alias, Table<SamplesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>samples</code> table reference
     */
    public Samples(String alias) {
        this(DSL.name(alias), SAMPLES);
    }

    /**
     * Create an aliased <code>samples</code> table reference
     */
    public Samples(Name alias) {
        this(alias, SAMPLES);
    }

    /**
     * Create a <code>samples</code> table reference
     */
    public Samples() {
        this(DSL.name("samples"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<SamplesRecord> getPrimaryKey() {
        return Keys.SAMPLES__PK_SAMPLES;
    }

    @Override
    public Samples as(String alias) {
        return new Samples(DSL.name(alias), this);
    }

    @Override
    public Samples as(Name alias) {
        return new Samples(alias, this);
    }

    @Override
    public Samples as(Table<?> alias) {
        return new Samples(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Samples rename(String name) {
        return new Samples(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Samples rename(Name name) {
        return new Samples(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Samples rename(Table<?> name) {
        return new Samples(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Samples where(Condition condition) {
        return new Samples(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Samples where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Samples where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Samples where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Samples where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Samples where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Samples where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Samples where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Samples whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Samples whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
