/*
 * This file is generated by jOOQ.
 */
package com.perfscope.model.tables;


import com.perfscope.model.DefaultSchema;
import com.perfscope.model.tables.records.CbrViewRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CbrView extends TableImpl<CbrViewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>cbr_view</code>
     */
    public static final CbrView CBR_VIEW = new CbrView();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CbrViewRecord> getRecordType() {
        return CbrViewRecord.class;
    }

    /**
     * The column <code>cbr_view.id</code>.
     */
    public final TableField<CbrViewRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>cbr_view.time</code>.
     */
    public final TableField<CbrViewRecord, Long> TIME = createField(DSL.name("time"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>cbr_view.cpu</code>.
     */
    public final TableField<CbrViewRecord, Integer> CPU = createField(DSL.name("cpu"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>cbr_view.cbr</code>.
     */
    public final TableField<CbrViewRecord, Integer> CBR = createField(DSL.name("cbr"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>cbr_view.mhz</code>.
     */
    public final TableField<CbrViewRecord, Integer> MHZ = createField(DSL.name("mhz"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>cbr_view.percent</code>.
     */
    public final TableField<CbrViewRecord, Integer> PERCENT = createField(DSL.name("percent"), SQLDataType.INTEGER, this, "");

    private CbrView(Name alias, Table<CbrViewRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private CbrView(Name alias, Table<CbrViewRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("CREATE VIEW cbr_view AS SELECT cbr.id,time,cpu,cbr,mhz,percent FROM cbr INNER JOIN samples ON samples.id = cbr.id"), where);
    }

    /**
     * Create an aliased <code>cbr_view</code> table reference
     */
    public CbrView(String alias) {
        this(DSL.name(alias), CBR_VIEW);
    }

    /**
     * Create an aliased <code>cbr_view</code> table reference
     */
    public CbrView(Name alias) {
        this(alias, CBR_VIEW);
    }

    /**
     * Create a <code>cbr_view</code> table reference
     */
    public CbrView() {
        this(DSL.name("cbr_view"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public CbrView as(String alias) {
        return new CbrView(DSL.name(alias), this);
    }

    @Override
    public CbrView as(Name alias) {
        return new CbrView(alias, this);
    }

    @Override
    public CbrView as(Table<?> alias) {
        return new CbrView(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CbrView rename(String name) {
        return new CbrView(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CbrView rename(Name name) {
        return new CbrView(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CbrView rename(Table<?> name) {
        return new CbrView(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CbrView where(Condition condition) {
        return new CbrView(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CbrView where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CbrView where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CbrView where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CbrView where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CbrView where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CbrView where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CbrView where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CbrView whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CbrView whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
