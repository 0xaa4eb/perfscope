/*
 * This file is generated by jOOQ.
 */
package com.perfscope.model.tables;


import com.perfscope.model.DefaultSchema;
import com.perfscope.model.tables.records.SamplesViewRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SamplesView extends TableImpl<SamplesViewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>samples_view</code>
     */
    public static final SamplesView SAMPLES_VIEW = new SamplesView();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SamplesViewRecord> getRecordType() {
        return SamplesViewRecord.class;
    }

    /**
     * The column <code>samples_view.id</code>.
     */
    public final TableField<SamplesViewRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>samples_view.time</code>.
     */
    public final TableField<SamplesViewRecord, Long> TIME = createField(DSL.name("time"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>samples_view.cpu</code>.
     */
    public final TableField<SamplesViewRecord, Integer> CPU = createField(DSL.name("cpu"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>samples_view.pid</code>.
     */
    public final TableField<SamplesViewRecord, Integer> PID = createField(DSL.name("pid"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>samples_view.tid</code>.
     */
    public final TableField<SamplesViewRecord, Integer> TID = createField(DSL.name("tid"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>samples_view.command</code>.
     */
    public final TableField<SamplesViewRecord, String> COMMAND = createField(DSL.name("command"), SQLDataType.VARCHAR(16), this, "");

    /**
     * The column <code>samples_view.event</code>.
     */
    public final TableField<SamplesViewRecord, String> EVENT = createField(DSL.name("event"), SQLDataType.VARCHAR(80), this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<SamplesViewRecord, Object> IP_HEX = createField(DSL.name("ip_hex"), org.jooq.impl.SQLDataType.OTHER, this, "");

    /**
     * The column <code>samples_view.symbol</code>.
     */
    public final TableField<SamplesViewRecord, String> SYMBOL = createField(DSL.name("symbol"), SQLDataType.VARCHAR(2048), this, "");

    /**
     * The column <code>samples_view.sym_offset</code>.
     */
    public final TableField<SamplesViewRecord, Long> SYM_OFFSET = createField(DSL.name("sym_offset"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>samples_view.dso_short_name</code>.
     */
    public final TableField<SamplesViewRecord, String> DSO_SHORT_NAME = createField(DSL.name("dso_short_name"), SQLDataType.VARCHAR(256), this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<SamplesViewRecord, Object> TO_IP_HEX = createField(DSL.name("to_ip_hex"), org.jooq.impl.SQLDataType.OTHER, this, "");

    /**
     * The column <code>samples_view.to_symbol</code>.
     */
    public final TableField<SamplesViewRecord, String> TO_SYMBOL = createField(DSL.name("to_symbol"), SQLDataType.VARCHAR(2048), this, "");

    /**
     * The column <code>samples_view.to_sym_offset</code>.
     */
    public final TableField<SamplesViewRecord, Long> TO_SYM_OFFSET = createField(DSL.name("to_sym_offset"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>samples_view.to_dso_short_name</code>.
     */
    public final TableField<SamplesViewRecord, String> TO_DSO_SHORT_NAME = createField(DSL.name("to_dso_short_name"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>samples_view.branch_type_name</code>.
     */
    public final TableField<SamplesViewRecord, String> BRANCH_TYPE_NAME = createField(DSL.name("branch_type_name"), SQLDataType.VARCHAR(80), this, "");

    /**
     * The column <code>samples_view.in_tx</code>.
     */
    public final TableField<SamplesViewRecord, Boolean> IN_TX = createField(DSL.name("in_tx"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>samples_view.insn_count</code>.
     */
    public final TableField<SamplesViewRecord, Long> INSN_COUNT = createField(DSL.name("insn_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>samples_view.cyc_count</code>.
     */
    public final TableField<SamplesViewRecord, Long> CYC_COUNT = createField(DSL.name("cyc_count"), SQLDataType.BIGINT, this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<SamplesViewRecord, Object> IPC = createField(DSL.name("IPC"), org.jooq.impl.SQLDataType.OTHER, this, "");

    /**
     * The column <code>samples_view.flags</code>.
     */
    public final TableField<SamplesViewRecord, Integer> FLAGS = createField(DSL.name("flags"), SQLDataType.INTEGER, this, "");

    private SamplesView(Name alias, Table<SamplesViewRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SamplesView(Name alias, Table<SamplesViewRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        CREATE VIEW samples_view AS SELECT id,time,cpu,(SELECT pid FROM threads WHERE id = thread_id) AS pid,(SELECT tid FROM threads WHERE id = thread_id) AS tid,(SELECT comm FROM comms WHERE id = comm_id) AS command,(SELECT name FROM selected_events WHERE id = evsel_id) AS event,printf("%x", ip) AS ip_hex,(SELECT name FROM symbols WHERE id = symbol_id) AS symbol,sym_offset,(SELECT short_name FROM dsos WHERE id = dso_id) AS dso_short_name,printf("%x", to_ip) AS to_ip_hex,(SELECT name FROM symbols WHERE id = to_symbol_id) AS to_symbol,to_sym_offset,(SELECT short_name FROM dsos WHERE id = to_dso_id) AS to_dso_short_name,(SELECT name FROM branch_types WHERE id = branch_type) AS branch_type_name,in_tx,insn_count,cyc_count,CASE WHEN cyc_count=0 THEN CAST(0 AS FLOAT) ELSE ROUND(CAST(insn_count AS FLOAT) / cyc_count, 2) END AS IPC,flags FROM samples
        """), where);
    }

    /**
     * Create an aliased <code>samples_view</code> table reference
     */
    public SamplesView(String alias) {
        this(DSL.name(alias), SAMPLES_VIEW);
    }

    /**
     * Create an aliased <code>samples_view</code> table reference
     */
    public SamplesView(Name alias) {
        this(alias, SAMPLES_VIEW);
    }

    /**
     * Create a <code>samples_view</code> table reference
     */
    public SamplesView() {
        this(DSL.name("samples_view"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public SamplesView as(String alias) {
        return new SamplesView(DSL.name(alias), this);
    }

    @Override
    public SamplesView as(Name alias) {
        return new SamplesView(alias, this);
    }

    @Override
    public SamplesView as(Table<?> alias) {
        return new SamplesView(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SamplesView rename(String name) {
        return new SamplesView(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SamplesView rename(Name name) {
        return new SamplesView(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SamplesView rename(Table<?> name) {
        return new SamplesView(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SamplesView where(Condition condition) {
        return new SamplesView(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SamplesView where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SamplesView where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SamplesView where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SamplesView where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SamplesView where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SamplesView where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SamplesView where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SamplesView whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SamplesView whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
