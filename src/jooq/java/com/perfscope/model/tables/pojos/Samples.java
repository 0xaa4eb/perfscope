/*
 * This file is generated by jOOQ.
 */
package com.perfscope.model.tables.pojos;


import java.io.Serializable;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Samples implements Serializable {

    private static final long serialVersionUID = 1L;

    private final Integer id;
    private final Long evselId;
    private final Long machineId;
    private final Long threadId;
    private final Long commId;
    private final Long dsoId;
    private final Long symbolId;
    private final Long symOffset;
    private final Long ip;
    private final Long time;
    private final Integer cpu;
    private final Long toDsoId;
    private final Long toSymbolId;
    private final Long toSymOffset;
    private final Long toIp;
    private final Integer branchType;
    private final Boolean inTx;
    private final Long callPathId;
    private final Long insnCount;
    private final Long cycCount;
    private final Integer flags;

    public Samples(Samples value) {
        this.id = value.id;
        this.evselId = value.evselId;
        this.machineId = value.machineId;
        this.threadId = value.threadId;
        this.commId = value.commId;
        this.dsoId = value.dsoId;
        this.symbolId = value.symbolId;
        this.symOffset = value.symOffset;
        this.ip = value.ip;
        this.time = value.time;
        this.cpu = value.cpu;
        this.toDsoId = value.toDsoId;
        this.toSymbolId = value.toSymbolId;
        this.toSymOffset = value.toSymOffset;
        this.toIp = value.toIp;
        this.branchType = value.branchType;
        this.inTx = value.inTx;
        this.callPathId = value.callPathId;
        this.insnCount = value.insnCount;
        this.cycCount = value.cycCount;
        this.flags = value.flags;
    }

    public Samples(
        Integer id,
        Long evselId,
        Long machineId,
        Long threadId,
        Long commId,
        Long dsoId,
        Long symbolId,
        Long symOffset,
        Long ip,
        Long time,
        Integer cpu,
        Long toDsoId,
        Long toSymbolId,
        Long toSymOffset,
        Long toIp,
        Integer branchType,
        Boolean inTx,
        Long callPathId,
        Long insnCount,
        Long cycCount,
        Integer flags
    ) {
        this.id = id;
        this.evselId = evselId;
        this.machineId = machineId;
        this.threadId = threadId;
        this.commId = commId;
        this.dsoId = dsoId;
        this.symbolId = symbolId;
        this.symOffset = symOffset;
        this.ip = ip;
        this.time = time;
        this.cpu = cpu;
        this.toDsoId = toDsoId;
        this.toSymbolId = toSymbolId;
        this.toSymOffset = toSymOffset;
        this.toIp = toIp;
        this.branchType = branchType;
        this.inTx = inTx;
        this.callPathId = callPathId;
        this.insnCount = insnCount;
        this.cycCount = cycCount;
        this.flags = flags;
    }

    /**
     * Getter for <code>samples.id</code>.
     */
    public Integer getId() {
        return this.id;
    }

    /**
     * Getter for <code>samples.evsel_id</code>.
     */
    public Long getEvselId() {
        return this.evselId;
    }

    /**
     * Getter for <code>samples.machine_id</code>.
     */
    public Long getMachineId() {
        return this.machineId;
    }

    /**
     * Getter for <code>samples.thread_id</code>.
     */
    public Long getThreadId() {
        return this.threadId;
    }

    /**
     * Getter for <code>samples.comm_id</code>.
     */
    public Long getCommId() {
        return this.commId;
    }

    /**
     * Getter for <code>samples.dso_id</code>.
     */
    public Long getDsoId() {
        return this.dsoId;
    }

    /**
     * Getter for <code>samples.symbol_id</code>.
     */
    public Long getSymbolId() {
        return this.symbolId;
    }

    /**
     * Getter for <code>samples.sym_offset</code>.
     */
    public Long getSymOffset() {
        return this.symOffset;
    }

    /**
     * Getter for <code>samples.ip</code>.
     */
    public Long getIp() {
        return this.ip;
    }

    /**
     * Getter for <code>samples.time</code>.
     */
    public Long getTime() {
        return this.time;
    }

    /**
     * Getter for <code>samples.cpu</code>.
     */
    public Integer getCpu() {
        return this.cpu;
    }

    /**
     * Getter for <code>samples.to_dso_id</code>.
     */
    public Long getToDsoId() {
        return this.toDsoId;
    }

    /**
     * Getter for <code>samples.to_symbol_id</code>.
     */
    public Long getToSymbolId() {
        return this.toSymbolId;
    }

    /**
     * Getter for <code>samples.to_sym_offset</code>.
     */
    public Long getToSymOffset() {
        return this.toSymOffset;
    }

    /**
     * Getter for <code>samples.to_ip</code>.
     */
    public Long getToIp() {
        return this.toIp;
    }

    /**
     * Getter for <code>samples.branch_type</code>.
     */
    public Integer getBranchType() {
        return this.branchType;
    }

    /**
     * Getter for <code>samples.in_tx</code>.
     */
    public Boolean getInTx() {
        return this.inTx;
    }

    /**
     * Getter for <code>samples.call_path_id</code>.
     */
    public Long getCallPathId() {
        return this.callPathId;
    }

    /**
     * Getter for <code>samples.insn_count</code>.
     */
    public Long getInsnCount() {
        return this.insnCount;
    }

    /**
     * Getter for <code>samples.cyc_count</code>.
     */
    public Long getCycCount() {
        return this.cycCount;
    }

    /**
     * Getter for <code>samples.flags</code>.
     */
    public Integer getFlags() {
        return this.flags;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Samples other = (Samples) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.evselId == null) {
            if (other.evselId != null)
                return false;
        }
        else if (!this.evselId.equals(other.evselId))
            return false;
        if (this.machineId == null) {
            if (other.machineId != null)
                return false;
        }
        else if (!this.machineId.equals(other.machineId))
            return false;
        if (this.threadId == null) {
            if (other.threadId != null)
                return false;
        }
        else if (!this.threadId.equals(other.threadId))
            return false;
        if (this.commId == null) {
            if (other.commId != null)
                return false;
        }
        else if (!this.commId.equals(other.commId))
            return false;
        if (this.dsoId == null) {
            if (other.dsoId != null)
                return false;
        }
        else if (!this.dsoId.equals(other.dsoId))
            return false;
        if (this.symbolId == null) {
            if (other.symbolId != null)
                return false;
        }
        else if (!this.symbolId.equals(other.symbolId))
            return false;
        if (this.symOffset == null) {
            if (other.symOffset != null)
                return false;
        }
        else if (!this.symOffset.equals(other.symOffset))
            return false;
        if (this.ip == null) {
            if (other.ip != null)
                return false;
        }
        else if (!this.ip.equals(other.ip))
            return false;
        if (this.time == null) {
            if (other.time != null)
                return false;
        }
        else if (!this.time.equals(other.time))
            return false;
        if (this.cpu == null) {
            if (other.cpu != null)
                return false;
        }
        else if (!this.cpu.equals(other.cpu))
            return false;
        if (this.toDsoId == null) {
            if (other.toDsoId != null)
                return false;
        }
        else if (!this.toDsoId.equals(other.toDsoId))
            return false;
        if (this.toSymbolId == null) {
            if (other.toSymbolId != null)
                return false;
        }
        else if (!this.toSymbolId.equals(other.toSymbolId))
            return false;
        if (this.toSymOffset == null) {
            if (other.toSymOffset != null)
                return false;
        }
        else if (!this.toSymOffset.equals(other.toSymOffset))
            return false;
        if (this.toIp == null) {
            if (other.toIp != null)
                return false;
        }
        else if (!this.toIp.equals(other.toIp))
            return false;
        if (this.branchType == null) {
            if (other.branchType != null)
                return false;
        }
        else if (!this.branchType.equals(other.branchType))
            return false;
        if (this.inTx == null) {
            if (other.inTx != null)
                return false;
        }
        else if (!this.inTx.equals(other.inTx))
            return false;
        if (this.callPathId == null) {
            if (other.callPathId != null)
                return false;
        }
        else if (!this.callPathId.equals(other.callPathId))
            return false;
        if (this.insnCount == null) {
            if (other.insnCount != null)
                return false;
        }
        else if (!this.insnCount.equals(other.insnCount))
            return false;
        if (this.cycCount == null) {
            if (other.cycCount != null)
                return false;
        }
        else if (!this.cycCount.equals(other.cycCount))
            return false;
        if (this.flags == null) {
            if (other.flags != null)
                return false;
        }
        else if (!this.flags.equals(other.flags))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.evselId == null) ? 0 : this.evselId.hashCode());
        result = prime * result + ((this.machineId == null) ? 0 : this.machineId.hashCode());
        result = prime * result + ((this.threadId == null) ? 0 : this.threadId.hashCode());
        result = prime * result + ((this.commId == null) ? 0 : this.commId.hashCode());
        result = prime * result + ((this.dsoId == null) ? 0 : this.dsoId.hashCode());
        result = prime * result + ((this.symbolId == null) ? 0 : this.symbolId.hashCode());
        result = prime * result + ((this.symOffset == null) ? 0 : this.symOffset.hashCode());
        result = prime * result + ((this.ip == null) ? 0 : this.ip.hashCode());
        result = prime * result + ((this.time == null) ? 0 : this.time.hashCode());
        result = prime * result + ((this.cpu == null) ? 0 : this.cpu.hashCode());
        result = prime * result + ((this.toDsoId == null) ? 0 : this.toDsoId.hashCode());
        result = prime * result + ((this.toSymbolId == null) ? 0 : this.toSymbolId.hashCode());
        result = prime * result + ((this.toSymOffset == null) ? 0 : this.toSymOffset.hashCode());
        result = prime * result + ((this.toIp == null) ? 0 : this.toIp.hashCode());
        result = prime * result + ((this.branchType == null) ? 0 : this.branchType.hashCode());
        result = prime * result + ((this.inTx == null) ? 0 : this.inTx.hashCode());
        result = prime * result + ((this.callPathId == null) ? 0 : this.callPathId.hashCode());
        result = prime * result + ((this.insnCount == null) ? 0 : this.insnCount.hashCode());
        result = prime * result + ((this.cycCount == null) ? 0 : this.cycCount.hashCode());
        result = prime * result + ((this.flags == null) ? 0 : this.flags.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Samples (");

        sb.append(id);
        sb.append(", ").append(evselId);
        sb.append(", ").append(machineId);
        sb.append(", ").append(threadId);
        sb.append(", ").append(commId);
        sb.append(", ").append(dsoId);
        sb.append(", ").append(symbolId);
        sb.append(", ").append(symOffset);
        sb.append(", ").append(ip);
        sb.append(", ").append(time);
        sb.append(", ").append(cpu);
        sb.append(", ").append(toDsoId);
        sb.append(", ").append(toSymbolId);
        sb.append(", ").append(toSymOffset);
        sb.append(", ").append(toIp);
        sb.append(", ").append(branchType);
        sb.append(", ").append(inTx);
        sb.append(", ").append(callPathId);
        sb.append(", ").append(insnCount);
        sb.append(", ").append(cycCount);
        sb.append(", ").append(flags);

        sb.append(")");
        return sb.toString();
    }
}
