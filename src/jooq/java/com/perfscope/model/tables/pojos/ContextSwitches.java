/*
 * This file is generated by jOOQ.
 */
package com.perfscope.model.tables.pojos;


import java.io.Serializable;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ContextSwitches implements Serializable {

    private static final long serialVersionUID = 1L;

    private final Integer id;
    private final Long machineId;
    private final Long time;
    private final Integer cpu;
    private final Long threadOutId;
    private final Long commOutId;
    private final Long threadInId;
    private final Long commInId;
    private final Integer flags;

    public ContextSwitches(ContextSwitches value) {
        this.id = value.id;
        this.machineId = value.machineId;
        this.time = value.time;
        this.cpu = value.cpu;
        this.threadOutId = value.threadOutId;
        this.commOutId = value.commOutId;
        this.threadInId = value.threadInId;
        this.commInId = value.commInId;
        this.flags = value.flags;
    }

    public ContextSwitches(
        Integer id,
        Long machineId,
        Long time,
        Integer cpu,
        Long threadOutId,
        Long commOutId,
        Long threadInId,
        Long commInId,
        Integer flags
    ) {
        this.id = id;
        this.machineId = machineId;
        this.time = time;
        this.cpu = cpu;
        this.threadOutId = threadOutId;
        this.commOutId = commOutId;
        this.threadInId = threadInId;
        this.commInId = commInId;
        this.flags = flags;
    }

    /**
     * Getter for <code>context_switches.id</code>.
     */
    public Integer getId() {
        return this.id;
    }

    /**
     * Getter for <code>context_switches.machine_id</code>.
     */
    public Long getMachineId() {
        return this.machineId;
    }

    /**
     * Getter for <code>context_switches.time</code>.
     */
    public Long getTime() {
        return this.time;
    }

    /**
     * Getter for <code>context_switches.cpu</code>.
     */
    public Integer getCpu() {
        return this.cpu;
    }

    /**
     * Getter for <code>context_switches.thread_out_id</code>.
     */
    public Long getThreadOutId() {
        return this.threadOutId;
    }

    /**
     * Getter for <code>context_switches.comm_out_id</code>.
     */
    public Long getCommOutId() {
        return this.commOutId;
    }

    /**
     * Getter for <code>context_switches.thread_in_id</code>.
     */
    public Long getThreadInId() {
        return this.threadInId;
    }

    /**
     * Getter for <code>context_switches.comm_in_id</code>.
     */
    public Long getCommInId() {
        return this.commInId;
    }

    /**
     * Getter for <code>context_switches.flags</code>.
     */
    public Integer getFlags() {
        return this.flags;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final ContextSwitches other = (ContextSwitches) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.machineId == null) {
            if (other.machineId != null)
                return false;
        }
        else if (!this.machineId.equals(other.machineId))
            return false;
        if (this.time == null) {
            if (other.time != null)
                return false;
        }
        else if (!this.time.equals(other.time))
            return false;
        if (this.cpu == null) {
            if (other.cpu != null)
                return false;
        }
        else if (!this.cpu.equals(other.cpu))
            return false;
        if (this.threadOutId == null) {
            if (other.threadOutId != null)
                return false;
        }
        else if (!this.threadOutId.equals(other.threadOutId))
            return false;
        if (this.commOutId == null) {
            if (other.commOutId != null)
                return false;
        }
        else if (!this.commOutId.equals(other.commOutId))
            return false;
        if (this.threadInId == null) {
            if (other.threadInId != null)
                return false;
        }
        else if (!this.threadInId.equals(other.threadInId))
            return false;
        if (this.commInId == null) {
            if (other.commInId != null)
                return false;
        }
        else if (!this.commInId.equals(other.commInId))
            return false;
        if (this.flags == null) {
            if (other.flags != null)
                return false;
        }
        else if (!this.flags.equals(other.flags))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.machineId == null) ? 0 : this.machineId.hashCode());
        result = prime * result + ((this.time == null) ? 0 : this.time.hashCode());
        result = prime * result + ((this.cpu == null) ? 0 : this.cpu.hashCode());
        result = prime * result + ((this.threadOutId == null) ? 0 : this.threadOutId.hashCode());
        result = prime * result + ((this.commOutId == null) ? 0 : this.commOutId.hashCode());
        result = prime * result + ((this.threadInId == null) ? 0 : this.threadInId.hashCode());
        result = prime * result + ((this.commInId == null) ? 0 : this.commInId.hashCode());
        result = prime * result + ((this.flags == null) ? 0 : this.flags.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("ContextSwitches (");

        sb.append(id);
        sb.append(", ").append(machineId);
        sb.append(", ").append(time);
        sb.append(", ").append(cpu);
        sb.append(", ").append(threadOutId);
        sb.append(", ").append(commOutId);
        sb.append(", ").append(threadInId);
        sb.append(", ").append(commInId);
        sb.append(", ").append(flags);

        sb.append(")");
        return sb.toString();
    }
}
