/*
 * This file is generated by jOOQ.
 */
package com.perfscope.model.tables;


import com.perfscope.model.DefaultSchema;
import com.perfscope.model.Keys;
import com.perfscope.model.tables.records.SymbolsRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Symbols extends TableImpl<SymbolsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>symbols</code>
     */
    public static final Symbols SYMBOLS = new Symbols();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SymbolsRecord> getRecordType() {
        return SymbolsRecord.class;
    }

    /**
     * The column <code>symbols.id</code>.
     */
    public final TableField<SymbolsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>symbols.dso_id</code>.
     */
    public final TableField<SymbolsRecord, Long> DSO_ID = createField(DSL.name("dso_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>symbols.sym_start</code>.
     */
    public final TableField<SymbolsRecord, Long> SYM_START = createField(DSL.name("sym_start"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>symbols.sym_end</code>.
     */
    public final TableField<SymbolsRecord, Long> SYM_END = createField(DSL.name("sym_end"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>symbols.binding</code>.
     */
    public final TableField<SymbolsRecord, Integer> BINDING = createField(DSL.name("binding"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>symbols.name</code>.
     */
    public final TableField<SymbolsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(2048), this, "");

    private Symbols(Name alias, Table<SymbolsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Symbols(Name alias, Table<SymbolsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>symbols</code> table reference
     */
    public Symbols(String alias) {
        this(DSL.name(alias), SYMBOLS);
    }

    /**
     * Create an aliased <code>symbols</code> table reference
     */
    public Symbols(Name alias) {
        this(alias, SYMBOLS);
    }

    /**
     * Create a <code>symbols</code> table reference
     */
    public Symbols() {
        this(DSL.name("symbols"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<SymbolsRecord> getPrimaryKey() {
        return Keys.SYMBOLS__PK_SYMBOLS;
    }

    @Override
    public Symbols as(String alias) {
        return new Symbols(DSL.name(alias), this);
    }

    @Override
    public Symbols as(Name alias) {
        return new Symbols(alias, this);
    }

    @Override
    public Symbols as(Table<?> alias) {
        return new Symbols(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Symbols rename(String name) {
        return new Symbols(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Symbols rename(Name name) {
        return new Symbols(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Symbols rename(Table<?> name) {
        return new Symbols(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Symbols where(Condition condition) {
        return new Symbols(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Symbols where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Symbols where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Symbols where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Symbols where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Symbols where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Symbols where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Symbols where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Symbols whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Symbols whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
