/*
 * This file is generated by jOOQ.
 */
package com.perfscope.model;


import com.perfscope.model.tables.BranchTypes;
import com.perfscope.model.tables.CallPaths;
import com.perfscope.model.tables.CallPathsView;
import com.perfscope.model.tables.Calls;
import com.perfscope.model.tables.CallsView;
import com.perfscope.model.tables.Cbr;
import com.perfscope.model.tables.CbrView;
import com.perfscope.model.tables.CommThreads;
import com.perfscope.model.tables.CommThreadsView;
import com.perfscope.model.tables.Comms;
import com.perfscope.model.tables.ContextSwitches;
import com.perfscope.model.tables.ContextSwitchesView;
import com.perfscope.model.tables.Dsos;
import com.perfscope.model.tables.DsosView;
import com.perfscope.model.tables.Machines;
import com.perfscope.model.tables.MachinesView;
import com.perfscope.model.tables.Samples;
import com.perfscope.model.tables.SamplesView;
import com.perfscope.model.tables.SelectedEvents;
import com.perfscope.model.tables.Symbols;
import com.perfscope.model.tables.SymbolsView;
import com.perfscope.model.tables.Threads;
import com.perfscope.model.tables.ThreadsView;

import java.util.Arrays;
import java.util.List;

import org.jooq.Catalog;
import org.jooq.Table;
import org.jooq.impl.SchemaImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DefaultSchema extends SchemaImpl {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>DEFAULT_SCHEMA</code>
     */
    public static final DefaultSchema DEFAULT_SCHEMA = new DefaultSchema();

    /**
     * The table <code>branch_types</code>.
     */
    public final BranchTypes BRANCH_TYPES = BranchTypes.BRANCH_TYPES;

    /**
     * The table <code>call_paths</code>.
     */
    public final CallPaths CALL_PATHS = CallPaths.CALL_PATHS;

    /**
     * The table <code>call_paths_view</code>.
     */
    public final CallPathsView CALL_PATHS_VIEW = CallPathsView.CALL_PATHS_VIEW;

    /**
     * The table <code>calls</code>.
     */
    public final Calls CALLS = Calls.CALLS;

    /**
     * The table <code>calls_view</code>.
     */
    public final CallsView CALLS_VIEW = CallsView.CALLS_VIEW;

    /**
     * The table <code>cbr</code>.
     */
    public final Cbr CBR = Cbr.CBR;

    /**
     * The table <code>cbr_view</code>.
     */
    public final CbrView CBR_VIEW = CbrView.CBR_VIEW;

    /**
     * The table <code>comm_threads</code>.
     */
    public final CommThreads COMM_THREADS = CommThreads.COMM_THREADS;

    /**
     * The table <code>comm_threads_view</code>.
     */
    public final CommThreadsView COMM_THREADS_VIEW = CommThreadsView.COMM_THREADS_VIEW;

    /**
     * The table <code>comms</code>.
     */
    public final Comms COMMS = Comms.COMMS;

    /**
     * The table <code>context_switches</code>.
     */
    public final ContextSwitches CONTEXT_SWITCHES = ContextSwitches.CONTEXT_SWITCHES;

    /**
     * The table <code>context_switches_view</code>.
     */
    public final ContextSwitchesView CONTEXT_SWITCHES_VIEW = ContextSwitchesView.CONTEXT_SWITCHES_VIEW;

    /**
     * The table <code>dsos</code>.
     */
    public final Dsos DSOS = Dsos.DSOS;

    /**
     * The table <code>dsos_view</code>.
     */
    public final DsosView DSOS_VIEW = DsosView.DSOS_VIEW;

    /**
     * The table <code>machines</code>.
     */
    public final Machines MACHINES = Machines.MACHINES;

    /**
     * The table <code>machines_view</code>.
     */
    public final MachinesView MACHINES_VIEW = MachinesView.MACHINES_VIEW;

    /**
     * The table <code>samples</code>.
     */
    public final Samples SAMPLES = Samples.SAMPLES;

    /**
     * The table <code>samples_view</code>.
     */
    public final SamplesView SAMPLES_VIEW = SamplesView.SAMPLES_VIEW;

    /**
     * The table <code>selected_events</code>.
     */
    public final SelectedEvents SELECTED_EVENTS = SelectedEvents.SELECTED_EVENTS;

    /**
     * The table <code>symbols</code>.
     */
    public final Symbols SYMBOLS = Symbols.SYMBOLS;

    /**
     * The table <code>symbols_view</code>.
     */
    public final SymbolsView SYMBOLS_VIEW = SymbolsView.SYMBOLS_VIEW;

    /**
     * The table <code>threads</code>.
     */
    public final Threads THREADS = Threads.THREADS;

    /**
     * The table <code>threads_view</code>.
     */
    public final ThreadsView THREADS_VIEW = ThreadsView.THREADS_VIEW;

    /**
     * No further instances allowed
     */
    private DefaultSchema() {
        super("", null);
    }


    @Override
    public Catalog getCatalog() {
        return DefaultCatalog.DEFAULT_CATALOG;
    }

    @Override
    public final List<Table<?>> getTables() {
        return Arrays.asList(
            BranchTypes.BRANCH_TYPES,
            CallPaths.CALL_PATHS,
            CallPathsView.CALL_PATHS_VIEW,
            Calls.CALLS,
            CallsView.CALLS_VIEW,
            Cbr.CBR,
            CbrView.CBR_VIEW,
            CommThreads.COMM_THREADS,
            CommThreadsView.COMM_THREADS_VIEW,
            Comms.COMMS,
            ContextSwitches.CONTEXT_SWITCHES,
            ContextSwitchesView.CONTEXT_SWITCHES_VIEW,
            Dsos.DSOS,
            DsosView.DSOS_VIEW,
            Machines.MACHINES,
            MachinesView.MACHINES_VIEW,
            Samples.SAMPLES,
            SamplesView.SAMPLES_VIEW,
            SelectedEvents.SELECTED_EVENTS,
            Symbols.SYMBOLS,
            SymbolsView.SYMBOLS_VIEW,
            Threads.THREADS,
            ThreadsView.THREADS_VIEW
        );
    }
}
