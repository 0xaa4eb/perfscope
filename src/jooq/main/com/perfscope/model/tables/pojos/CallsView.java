/*
 * This file is generated by jOOQ.
 */
package com.tracelyp.model.tables.pojos;


import java.io.Serializable;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CallsView implements Serializable {

    private static final long serialVersionUID = 1L;

    private final Integer id;
    private final Long threadId;
    private final Integer pid;
    private final Integer tid;
    private final String command;
    private final Long callPathId;
    private final Object ip;
    private final Long symbolId;
    private final String symbol;
    private final Long callTime;
    private final Long returnTime;
    private final Object elapsedTime;
    private final Long branchCount;
    private final Long insnCount;
    private final Long cycCount;
    private final Object ipc;
    private final Long callId;
    private final Long returnId;
    private final Object flags;
    private final Long parentCallPathId;
    private final Long parentId;

    public CallsView(CallsView value) {
        this.id = value.id;
        this.threadId = value.threadId;
        this.pid = value.pid;
        this.tid = value.tid;
        this.command = value.command;
        this.callPathId = value.callPathId;
        this.ip = value.ip;
        this.symbolId = value.symbolId;
        this.symbol = value.symbol;
        this.callTime = value.callTime;
        this.returnTime = value.returnTime;
        this.elapsedTime = value.elapsedTime;
        this.branchCount = value.branchCount;
        this.insnCount = value.insnCount;
        this.cycCount = value.cycCount;
        this.ipc = value.ipc;
        this.callId = value.callId;
        this.returnId = value.returnId;
        this.flags = value.flags;
        this.parentCallPathId = value.parentCallPathId;
        this.parentId = value.parentId;
    }

    public CallsView(
        Integer id,
        Long threadId,
        Integer pid,
        Integer tid,
        String command,
        Long callPathId,
        Object ip,
        Long symbolId,
        String symbol,
        Long callTime,
        Long returnTime,
        Object elapsedTime,
        Long branchCount,
        Long insnCount,
        Long cycCount,
        Object ipc,
        Long callId,
        Long returnId,
        Object flags,
        Long parentCallPathId,
        Long parentId
    ) {
        this.id = id;
        this.threadId = threadId;
        this.pid = pid;
        this.tid = tid;
        this.command = command;
        this.callPathId = callPathId;
        this.ip = ip;
        this.symbolId = symbolId;
        this.symbol = symbol;
        this.callTime = callTime;
        this.returnTime = returnTime;
        this.elapsedTime = elapsedTime;
        this.branchCount = branchCount;
        this.insnCount = insnCount;
        this.cycCount = cycCount;
        this.ipc = ipc;
        this.callId = callId;
        this.returnId = returnId;
        this.flags = flags;
        this.parentCallPathId = parentCallPathId;
        this.parentId = parentId;
    }

    /**
     * Getter for <code>calls_view.id</code>.
     */
    public Integer getId() {
        return this.id;
    }

    /**
     * Getter for <code>calls_view.thread_id</code>.
     */
    public Long getThreadId() {
        return this.threadId;
    }

    /**
     * Getter for <code>calls_view.pid</code>.
     */
    public Integer getPid() {
        return this.pid;
    }

    /**
     * Getter for <code>calls_view.tid</code>.
     */
    public Integer getTid() {
        return this.tid;
    }

    /**
     * Getter for <code>calls_view.command</code>.
     */
    public String getCommand() {
        return this.command;
    }

    /**
     * Getter for <code>calls_view.call_path_id</code>.
     */
    public Long getCallPathId() {
        return this.callPathId;
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public Object getIp() {
        return this.ip;
    }

    /**
     * Getter for <code>calls_view.symbol_id</code>.
     */
    public Long getSymbolId() {
        return this.symbolId;
    }

    /**
     * Getter for <code>calls_view.symbol</code>.
     */
    public String getSymbol() {
        return this.symbol;
    }

    /**
     * Getter for <code>calls_view.call_time</code>.
     */
    public Long getCallTime() {
        return this.callTime;
    }

    /**
     * Getter for <code>calls_view.return_time</code>.
     */
    public Long getReturnTime() {
        return this.returnTime;
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public Object getElapsedTime() {
        return this.elapsedTime;
    }

    /**
     * Getter for <code>calls_view.branch_count</code>.
     */
    public Long getBranchCount() {
        return this.branchCount;
    }

    /**
     * Getter for <code>calls_view.insn_count</code>.
     */
    public Long getInsnCount() {
        return this.insnCount;
    }

    /**
     * Getter for <code>calls_view.cyc_count</code>.
     */
    public Long getCycCount() {
        return this.cycCount;
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public Object getIpc() {
        return this.ipc;
    }

    /**
     * Getter for <code>calls_view.call_id</code>.
     */
    public Long getCallId() {
        return this.callId;
    }

    /**
     * Getter for <code>calls_view.return_id</code>.
     */
    public Long getReturnId() {
        return this.returnId;
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public Object getFlags() {
        return this.flags;
    }

    /**
     * Getter for <code>calls_view.parent_call_path_id</code>.
     */
    public Long getParentCallPathId() {
        return this.parentCallPathId;
    }

    /**
     * Getter for <code>calls_view.parent_id</code>.
     */
    public Long getParentId() {
        return this.parentId;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final CallsView other = (CallsView) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.threadId == null) {
            if (other.threadId != null)
                return false;
        }
        else if (!this.threadId.equals(other.threadId))
            return false;
        if (this.pid == null) {
            if (other.pid != null)
                return false;
        }
        else if (!this.pid.equals(other.pid))
            return false;
        if (this.tid == null) {
            if (other.tid != null)
                return false;
        }
        else if (!this.tid.equals(other.tid))
            return false;
        if (this.command == null) {
            if (other.command != null)
                return false;
        }
        else if (!this.command.equals(other.command))
            return false;
        if (this.callPathId == null) {
            if (other.callPathId != null)
                return false;
        }
        else if (!this.callPathId.equals(other.callPathId))
            return false;
        if (this.ip == null) {
            if (other.ip != null)
                return false;
        }
        else if (!this.ip.equals(other.ip))
            return false;
        if (this.symbolId == null) {
            if (other.symbolId != null)
                return false;
        }
        else if (!this.symbolId.equals(other.symbolId))
            return false;
        if (this.symbol == null) {
            if (other.symbol != null)
                return false;
        }
        else if (!this.symbol.equals(other.symbol))
            return false;
        if (this.callTime == null) {
            if (other.callTime != null)
                return false;
        }
        else if (!this.callTime.equals(other.callTime))
            return false;
        if (this.returnTime == null) {
            if (other.returnTime != null)
                return false;
        }
        else if (!this.returnTime.equals(other.returnTime))
            return false;
        if (this.elapsedTime == null) {
            if (other.elapsedTime != null)
                return false;
        }
        else if (!this.elapsedTime.equals(other.elapsedTime))
            return false;
        if (this.branchCount == null) {
            if (other.branchCount != null)
                return false;
        }
        else if (!this.branchCount.equals(other.branchCount))
            return false;
        if (this.insnCount == null) {
            if (other.insnCount != null)
                return false;
        }
        else if (!this.insnCount.equals(other.insnCount))
            return false;
        if (this.cycCount == null) {
            if (other.cycCount != null)
                return false;
        }
        else if (!this.cycCount.equals(other.cycCount))
            return false;
        if (this.ipc == null) {
            if (other.ipc != null)
                return false;
        }
        else if (!this.ipc.equals(other.ipc))
            return false;
        if (this.callId == null) {
            if (other.callId != null)
                return false;
        }
        else if (!this.callId.equals(other.callId))
            return false;
        if (this.returnId == null) {
            if (other.returnId != null)
                return false;
        }
        else if (!this.returnId.equals(other.returnId))
            return false;
        if (this.flags == null) {
            if (other.flags != null)
                return false;
        }
        else if (!this.flags.equals(other.flags))
            return false;
        if (this.parentCallPathId == null) {
            if (other.parentCallPathId != null)
                return false;
        }
        else if (!this.parentCallPathId.equals(other.parentCallPathId))
            return false;
        if (this.parentId == null) {
            if (other.parentId != null)
                return false;
        }
        else if (!this.parentId.equals(other.parentId))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.threadId == null) ? 0 : this.threadId.hashCode());
        result = prime * result + ((this.pid == null) ? 0 : this.pid.hashCode());
        result = prime * result + ((this.tid == null) ? 0 : this.tid.hashCode());
        result = prime * result + ((this.command == null) ? 0 : this.command.hashCode());
        result = prime * result + ((this.callPathId == null) ? 0 : this.callPathId.hashCode());
        result = prime * result + ((this.ip == null) ? 0 : this.ip.hashCode());
        result = prime * result + ((this.symbolId == null) ? 0 : this.symbolId.hashCode());
        result = prime * result + ((this.symbol == null) ? 0 : this.symbol.hashCode());
        result = prime * result + ((this.callTime == null) ? 0 : this.callTime.hashCode());
        result = prime * result + ((this.returnTime == null) ? 0 : this.returnTime.hashCode());
        result = prime * result + ((this.elapsedTime == null) ? 0 : this.elapsedTime.hashCode());
        result = prime * result + ((this.branchCount == null) ? 0 : this.branchCount.hashCode());
        result = prime * result + ((this.insnCount == null) ? 0 : this.insnCount.hashCode());
        result = prime * result + ((this.cycCount == null) ? 0 : this.cycCount.hashCode());
        result = prime * result + ((this.ipc == null) ? 0 : this.ipc.hashCode());
        result = prime * result + ((this.callId == null) ? 0 : this.callId.hashCode());
        result = prime * result + ((this.returnId == null) ? 0 : this.returnId.hashCode());
        result = prime * result + ((this.flags == null) ? 0 : this.flags.hashCode());
        result = prime * result + ((this.parentCallPathId == null) ? 0 : this.parentCallPathId.hashCode());
        result = prime * result + ((this.parentId == null) ? 0 : this.parentId.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("CallsView (");

        sb.append(id);
        sb.append(", ").append(threadId);
        sb.append(", ").append(pid);
        sb.append(", ").append(tid);
        sb.append(", ").append(command);
        sb.append(", ").append(callPathId);
        sb.append(", ").append(ip);
        sb.append(", ").append(symbolId);
        sb.append(", ").append(symbol);
        sb.append(", ").append(callTime);
        sb.append(", ").append(returnTime);
        sb.append(", ").append(elapsedTime);
        sb.append(", ").append(branchCount);
        sb.append(", ").append(insnCount);
        sb.append(", ").append(cycCount);
        sb.append(", ").append(ipc);
        sb.append(", ").append(callId);
        sb.append(", ").append(returnId);
        sb.append(", ").append(flags);
        sb.append(", ").append(parentCallPathId);
        sb.append(", ").append(parentId);

        sb.append(")");
        return sb.toString();
    }
}
