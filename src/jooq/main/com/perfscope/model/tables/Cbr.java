/*
 * This file is generated by jOOQ.
 */
package com.tracelyp.model.tables;


import com.tracelyp.model.DefaultSchema;
import com.tracelyp.model.Keys;
import com.tracelyp.model.tables.records.CbrRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cbr extends TableImpl<CbrRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>cbr</code>
     */
    public static final Cbr CBR = new Cbr();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CbrRecord> getRecordType() {
        return CbrRecord.class;
    }

    /**
     * The column <code>cbr.id</code>.
     */
    public final TableField<CbrRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>cbr.cbr</code>.
     */
    public final TableField<CbrRecord, Integer> CBR_ = createField(DSL.name("cbr"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>cbr.mhz</code>.
     */
    public final TableField<CbrRecord, Integer> MHZ = createField(DSL.name("mhz"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>cbr.percent</code>.
     */
    public final TableField<CbrRecord, Integer> PERCENT = createField(DSL.name("percent"), SQLDataType.INTEGER, this, "");

    private Cbr(Name alias, Table<CbrRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Cbr(Name alias, Table<CbrRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>cbr</code> table reference
     */
    public Cbr(String alias) {
        this(DSL.name(alias), CBR);
    }

    /**
     * Create an aliased <code>cbr</code> table reference
     */
    public Cbr(Name alias) {
        this(alias, CBR);
    }

    /**
     * Create a <code>cbr</code> table reference
     */
    public Cbr() {
        this(DSL.name("cbr"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<CbrRecord> getPrimaryKey() {
        return Keys.CBR__PK_CBR;
    }

    @Override
    public Cbr as(String alias) {
        return new Cbr(DSL.name(alias), this);
    }

    @Override
    public Cbr as(Name alias) {
        return new Cbr(alias, this);
    }

    @Override
    public Cbr as(Table<?> alias) {
        return new Cbr(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cbr rename(String name) {
        return new Cbr(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cbr rename(Name name) {
        return new Cbr(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cbr rename(Table<?> name) {
        return new Cbr(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cbr where(Condition condition) {
        return new Cbr(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cbr where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cbr where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cbr where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cbr where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cbr where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cbr where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cbr where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cbr whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cbr whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
