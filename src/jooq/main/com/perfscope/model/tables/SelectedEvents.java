/*
 * This file is generated by jOOQ.
 */
package com.tracelyp.model.tables;


import com.tracelyp.model.DefaultSchema;
import com.tracelyp.model.Keys;
import com.tracelyp.model.tables.records.SelectedEventsRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SelectedEvents extends TableImpl<SelectedEventsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>selected_events</code>
     */
    public static final SelectedEvents SELECTED_EVENTS = new SelectedEvents();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SelectedEventsRecord> getRecordType() {
        return SelectedEventsRecord.class;
    }

    /**
     * The column <code>selected_events.id</code>.
     */
    public final TableField<SelectedEventsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>selected_events.name</code>.
     */
    public final TableField<SelectedEventsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(80), this, "");

    private SelectedEvents(Name alias, Table<SelectedEventsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SelectedEvents(Name alias, Table<SelectedEventsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>selected_events</code> table reference
     */
    public SelectedEvents(String alias) {
        this(DSL.name(alias), SELECTED_EVENTS);
    }

    /**
     * Create an aliased <code>selected_events</code> table reference
     */
    public SelectedEvents(Name alias) {
        this(alias, SELECTED_EVENTS);
    }

    /**
     * Create a <code>selected_events</code> table reference
     */
    public SelectedEvents() {
        this(DSL.name("selected_events"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<SelectedEventsRecord> getPrimaryKey() {
        return Keys.SELECTED_EVENTS__PK_SELECTED_EVENTS;
    }

    @Override
    public SelectedEvents as(String alias) {
        return new SelectedEvents(DSL.name(alias), this);
    }

    @Override
    public SelectedEvents as(Name alias) {
        return new SelectedEvents(alias, this);
    }

    @Override
    public SelectedEvents as(Table<?> alias) {
        return new SelectedEvents(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SelectedEvents rename(String name) {
        return new SelectedEvents(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SelectedEvents rename(Name name) {
        return new SelectedEvents(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SelectedEvents rename(Table<?> name) {
        return new SelectedEvents(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SelectedEvents where(Condition condition) {
        return new SelectedEvents(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SelectedEvents where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SelectedEvents where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SelectedEvents where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SelectedEvents where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SelectedEvents where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SelectedEvents where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SelectedEvents where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SelectedEvents whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SelectedEvents whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
