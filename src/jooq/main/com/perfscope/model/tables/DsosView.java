/*
 * This file is generated by jOOQ.
 */
package com.tracelyp.model.tables;


import com.tracelyp.model.DefaultSchema;
import com.tracelyp.model.tables.records.DsosViewRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DsosView extends TableImpl<DsosViewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>dsos_view</code>
     */
    public static final DsosView DSOS_VIEW = new DsosView();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DsosViewRecord> getRecordType() {
        return DsosViewRecord.class;
    }

    /**
     * The column <code>dsos_view.id</code>.
     */
    public final TableField<DsosViewRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>dsos_view.machine_id</code>.
     */
    public final TableField<DsosViewRecord, Long> MACHINE_ID = createField(DSL.name("machine_id"), SQLDataType.BIGINT, this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<DsosViewRecord, Object> HOST_OR_GUEST = createField(DSL.name("host_or_guest"), SQLDataType.OTHER, this, "");

    /**
     * The column <code>dsos_view.short_name</code>.
     */
    public final TableField<DsosViewRecord, String> SHORT_NAME = createField(DSL.name("short_name"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>dsos_view.long_name</code>.
     */
    public final TableField<DsosViewRecord, String> LONG_NAME = createField(DSL.name("long_name"), SQLDataType.VARCHAR(4096), this, "");

    /**
     * The column <code>dsos_view.build_id</code>.
     */
    public final TableField<DsosViewRecord, String> BUILD_ID = createField(DSL.name("build_id"), SQLDataType.VARCHAR(64), this, "");

    private DsosView(Name alias, Table<DsosViewRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private DsosView(Name alias, Table<DsosViewRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("CREATE VIEW dsos_view AS SELECT id,machine_id,(SELECT host_or_guest FROM machines_view WHERE id = machine_id) AS host_or_guest,short_name,long_name,build_id FROM dsos"), where);
    }

    /**
     * Create an aliased <code>dsos_view</code> table reference
     */
    public DsosView(String alias) {
        this(DSL.name(alias), DSOS_VIEW);
    }

    /**
     * Create an aliased <code>dsos_view</code> table reference
     */
    public DsosView(Name alias) {
        this(alias, DSOS_VIEW);
    }

    /**
     * Create a <code>dsos_view</code> table reference
     */
    public DsosView() {
        this(DSL.name("dsos_view"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public DsosView as(String alias) {
        return new DsosView(DSL.name(alias), this);
    }

    @Override
    public DsosView as(Name alias) {
        return new DsosView(alias, this);
    }

    @Override
    public DsosView as(Table<?> alias) {
        return new DsosView(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DsosView rename(String name) {
        return new DsosView(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DsosView rename(Name name) {
        return new DsosView(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DsosView rename(Table<?> name) {
        return new DsosView(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DsosView where(Condition condition) {
        return new DsosView(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DsosView where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DsosView where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DsosView where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DsosView where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DsosView where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DsosView where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DsosView where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DsosView whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DsosView whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
