/*
 * This file is generated by jOOQ.
 */
package com.tracelyp.model.tables;


import com.tracelyp.model.DefaultSchema;
import com.tracelyp.model.tables.records.CallPathsViewRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CallPathsView extends TableImpl<CallPathsViewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>call_paths_view</code>
     */
    public static final CallPathsView CALL_PATHS_VIEW = new CallPathsView();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CallPathsViewRecord> getRecordType() {
        return CallPathsViewRecord.class;
    }

    /**
     * The column <code>call_paths_view.id</code>.
     */
    public final TableField<CallPathsViewRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<CallPathsViewRecord, Object> IP = createField(DSL.name("ip"), org.jooq.impl.SQLDataType.OTHER, this, "");

    /**
     * The column <code>call_paths_view.symbol_id</code>.
     */
    public final TableField<CallPathsViewRecord, Long> SYMBOL_ID = createField(DSL.name("symbol_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>call_paths_view.symbol</code>.
     */
    public final TableField<CallPathsViewRecord, String> SYMBOL = createField(DSL.name("symbol"), SQLDataType.VARCHAR(2048), this, "");

    /**
     * The column <code>call_paths_view.dso_id</code>.
     */
    public final TableField<CallPathsViewRecord, Long> DSO_ID = createField(DSL.name("dso_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>call_paths_view.dso_short_name</code>.
     */
    public final TableField<CallPathsViewRecord, String> DSO_SHORT_NAME = createField(DSL.name("dso_short_name"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>call_paths_view.parent_id</code>.
     */
    public final TableField<CallPathsViewRecord, Long> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.BIGINT, this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<CallPathsViewRecord, Object> PARENT_IP = createField(DSL.name("parent_ip"), org.jooq.impl.SQLDataType.OTHER, this, "");

    /**
     * The column <code>call_paths_view.parent_symbol_id</code>.
     */
    public final TableField<CallPathsViewRecord, Long> PARENT_SYMBOL_ID = createField(DSL.name("parent_symbol_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>call_paths_view.parent_symbol</code>.
     */
    public final TableField<CallPathsViewRecord, String> PARENT_SYMBOL = createField(DSL.name("parent_symbol"), SQLDataType.VARCHAR(2048), this, "");

    /**
     * The column <code>call_paths_view.parent_dso_id</code>.
     */
    public final TableField<CallPathsViewRecord, Long> PARENT_DSO_ID = createField(DSL.name("parent_dso_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>call_paths_view.parent_dso_short_name</code>.
     */
    public final TableField<CallPathsViewRecord, String> PARENT_DSO_SHORT_NAME = createField(DSL.name("parent_dso_short_name"), SQLDataType.VARCHAR(256), this, "");

    private CallPathsView(Name alias, Table<CallPathsViewRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private CallPathsView(Name alias, Table<CallPathsViewRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        CREATE VIEW call_paths_view AS SELECT c.id,printf("%x", c.ip) AS ip,c.symbol_id,(SELECT name FROM symbols WHERE id = c.symbol_id) AS symbol,(SELECT dso_id FROM symbols WHERE id = c.symbol_id) AS dso_id,(SELECT dso FROM symbols_view  WHERE id = c.symbol_id) AS dso_short_name,c.parent_id,printf("%x", p.ip) AS parent_ip,p.symbol_id AS parent_symbol_id,(SELECT name FROM symbols WHERE id = p.symbol_id) AS parent_symbol,(SELECT dso_id FROM symbols WHERE id = p.symbol_id) AS parent_dso_id,(SELECT dso FROM symbols_view  WHERE id = p.symbol_id) AS parent_dso_short_name FROM call_paths c INNER JOIN call_paths p ON p.id = c.parent_id
        """), where);
    }

    /**
     * Create an aliased <code>call_paths_view</code> table reference
     */
    public CallPathsView(String alias) {
        this(DSL.name(alias), CALL_PATHS_VIEW);
    }

    /**
     * Create an aliased <code>call_paths_view</code> table reference
     */
    public CallPathsView(Name alias) {
        this(alias, CALL_PATHS_VIEW);
    }

    /**
     * Create a <code>call_paths_view</code> table reference
     */
    public CallPathsView() {
        this(DSL.name("call_paths_view"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public CallPathsView as(String alias) {
        return new CallPathsView(DSL.name(alias), this);
    }

    @Override
    public CallPathsView as(Name alias) {
        return new CallPathsView(alias, this);
    }

    @Override
    public CallPathsView as(Table<?> alias) {
        return new CallPathsView(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CallPathsView rename(String name) {
        return new CallPathsView(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CallPathsView rename(Name name) {
        return new CallPathsView(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CallPathsView rename(Table<?> name) {
        return new CallPathsView(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CallPathsView where(Condition condition) {
        return new CallPathsView(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CallPathsView where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CallPathsView where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CallPathsView where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CallPathsView where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CallPathsView where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CallPathsView where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CallPathsView where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CallPathsView whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CallPathsView whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
