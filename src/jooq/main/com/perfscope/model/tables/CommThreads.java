/*
 * This file is generated by jOOQ.
 */
package com.tracelyp.model.tables;


import com.tracelyp.model.DefaultSchema;
import com.tracelyp.model.Keys;
import com.tracelyp.model.tables.records.CommThreadsRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CommThreads extends TableImpl<CommThreadsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>comm_threads</code>
     */
    public static final CommThreads COMM_THREADS = new CommThreads();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CommThreadsRecord> getRecordType() {
        return CommThreadsRecord.class;
    }

    /**
     * The column <code>comm_threads.id</code>.
     */
    public final TableField<CommThreadsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>comm_threads.comm_id</code>.
     */
    public final TableField<CommThreadsRecord, Long> COMM_ID = createField(DSL.name("comm_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>comm_threads.thread_id</code>.
     */
    public final TableField<CommThreadsRecord, Long> THREAD_ID = createField(DSL.name("thread_id"), SQLDataType.BIGINT, this, "");

    private CommThreads(Name alias, Table<CommThreadsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private CommThreads(Name alias, Table<CommThreadsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>comm_threads</code> table reference
     */
    public CommThreads(String alias) {
        this(DSL.name(alias), COMM_THREADS);
    }

    /**
     * Create an aliased <code>comm_threads</code> table reference
     */
    public CommThreads(Name alias) {
        this(alias, COMM_THREADS);
    }

    /**
     * Create a <code>comm_threads</code> table reference
     */
    public CommThreads() {
        this(DSL.name("comm_threads"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<CommThreadsRecord> getPrimaryKey() {
        return Keys.COMM_THREADS__PK_COMM_THREADS;
    }

    @Override
    public CommThreads as(String alias) {
        return new CommThreads(DSL.name(alias), this);
    }

    @Override
    public CommThreads as(Name alias) {
        return new CommThreads(alias, this);
    }

    @Override
    public CommThreads as(Table<?> alias) {
        return new CommThreads(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CommThreads rename(String name) {
        return new CommThreads(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CommThreads rename(Name name) {
        return new CommThreads(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CommThreads rename(Table<?> name) {
        return new CommThreads(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CommThreads where(Condition condition) {
        return new CommThreads(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CommThreads where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CommThreads where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CommThreads where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CommThreads where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CommThreads where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CommThreads where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CommThreads where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CommThreads whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CommThreads whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
